{"version":3,"file":null,"sources":["../src/svg/strategies/SvgStrategy.ts","../src/charts/Chart.ts","../src/svg/components/Component.ts","../src/svg/components/XAxis.ts","../src/svg/components/YAxis.ts","../src/svg/components/XYAxes.ts","../src/svg/components/Lineset.ts","../src/svg/components/Container.ts","../src/svg/base/SvgChart.ts","../src/svg/strategies/SvgStrategyLinechart.ts","../src/charts/Linechart.ts"],"sourcesContent":["export interface SvgStrategy {\n    draw(): void;\n}\n\nexport class SvgContext {\n    private strategy: SvgStrategy;\n    \n    constructor(strategy: SvgStrategy) {\n        this.strategy = strategy;\n    }\n\n    public draw(): void {\n        this.strategy.draw();\n    }\n}","import {SvgContext, SvgStrategy} from '../svg/strategies/SvgStrategy';\nabstract class Chart {\n\n    private svg: SvgContext;\n\n    constructor(strategy: SvgStrategy) {\n        this.svg = new SvgContext(strategy);\n    }\n    \n    public draw (){\n        this.svg.draw();\n    }\n\n}\n\nexport default Chart;","import Config from '../../Config';\n\nabstract class Component {\n\n    protected config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    abstract update(): void;\n    abstract render(): void;\n};\n\nexport default Component;    \n","import {scaleTime, scaleLinear, scaleBand} from 'd3/d3-scale';\nimport {format} from 'd3-format';\nimport {axisBottom} from 'd3-axis';\nimport * as d3 from 'd3';\n\nimport Component from './Component';\nimport Config from '../../Config';\n\nclass XAxis extends Component {\n\n    private xAxis: any;\n\n    constructor(config: Config) {\n        super(config);\n\n        let width = this.config.get('width'),\n            xAxisFormat = this.config.get('xAxisFormat'),\n            xAxisType = this.config.get('xAxisType');\n\n        this.initializeXAxis(width, xAxisFormat, xAxisType);\n    }\n\n\n    public render(): void {\n\n    }\n\n    public update(): void {\n\n    }\n\n    /**\n     *\n     * Initializes a new horizontal axis\n     *\n     * @private\n     * @param {(string | number)} Width Width of the axis\n     * @param {string} xAxisFormat Format of the axis. This parameter is only valid when using a time axis.\n     * @param {string} xAxisType Type of the axis. It can be: time, linear or categorical.\n     *\n     * @memberOf XAxis\n     */\n    private initializeXAxis(width: string | number, xAxisFormat: string, xAxisType: string): void {\n        switch (xAxisType) {\n            case 'time':\n                this.xAxis = axisBottom(scaleTime().range([0, width]));\n                break;\n            case 'linear':\n                this.xAxis = axisBottom(scaleLinear().range([0, width])).tickFormat(format(xAxisFormat));\n                break;\n            case 'categorical':\n                this.xAxis = axisBottom(scaleBand().rangeRound([0, width]).padding(0.1).align(0.5));\n                break;\n            default:\n                throw new Error('Not allowed type for XAxis. Only allowed \"time\",  \"linear\" or \"categorical\". Got: ' + xAxisType);\n        }\n    }\n}\n\nexport default XAxis;","import Config from '../../Config';\nimport Component from './Component';\n\nclass YAxis extends Component {\n    constructor(config: Config) {\n        super(config);\n    }\n\n    public render(): void {\n\n    }\n\n    public update(): void {\n\n    }\n}\n\nexport default YAxis;","import XAxis from './XAxis';\nimport YAxis from './YAxis';\n\nimport Config from '../../Config';\nimport Component from './Component';\n\nclass XYAxis extends Component {\n    private x: XAxis;\n    private y: YAxis;\n\n    constructor(config: Config) {\n        super(config);\n\n        this.x = new XAxis(config);\n        this.y = new YAxis(config);\n    }\n\n    public render(): void {\n\n    }\n\n    public update(): void {\n\n    }\n\n\n}\n\nexport default XYAxis;","\nimport Component from './Component';\nimport XYAxes from './XYAxes';\nimport Config from '../../Config';\n\nclass Lineset extends Component {\n\n    private xyAxes : XYAxes;\n    \n    constructor(config: Config, xyAxes: XYAxes) {\n        super(config);\n        this.xyAxes = xyAxes;\n    }\n    \n    \n    public render(): void {\n\n    }\n\n    public update(): void {\n\n    }\n\n}\n\nexport default Lineset;","import {select} from 'd3-select';\n\nimport Component from './Component';\nimport Config from '../../Config';\n\nclass Container extends Component {\n\n    private svg: any;\n    private components: Component[] = [];\n\n    constructor(config: Config) {\n        super(config);\n        let selector = this.config.get('selector'),\n            width = this.config.get('width'),\n            height = this.config.get('height'),\n            marginLeft = this.config.get('marginLeft'),\n            marginTop = this.config.get('marginTop');\n\n        this.initializeContainer(selector, width, height, marginLeft, marginTop);\n    }\n\n    /**\n     * Add a new component to the current SVG container.\n     * \n     * @param {Component} component A component to be added\n     * @param {boolean} render If true, the component will be automatically rendered after adding it to the container\n     * @returns {Container}\n     * \n     * @memberOf Container\n    \n     */\n    public add(component: Component, render: boolean = true): Container {\n        \n        this.components.push(component);\n\n        if (render) {\n            this.render();\n        }\n\n        return this;\n    }\n\n\n    /**\n     * \n     * Initialize the svg container. \n     * @private\n     * @param {string} selector Selector where this graph will be included in\n     * @param {((number | string))} width Total width of the graph\n     * @param {((number | string))} height Total height of the graph\n     * @param {number} marginLeft Left margin\n     * @param {number} marginTop Top margin\n     * \n     * @memberOf Container\n    \n     */\n    private initializeContainer(selector: string, width: (number | string), height: (number | string), marginLeft: number, marginTop: number): void {\n        this.svg = select(selector)\n            .append('svg:svg')\n            .attr('width', width)\n            .attr('height', height)\n            .append('g')\n            .attr('class', 'chartContainer')\n            .attr('transform', 'translate(' + marginLeft + ',' + marginTop + ')');\n    }\n\n\n\n    public update(): void {\n\n    }\n\n    public render(): void {\n\n    }\n\n\n\n\n\n};\n\nexport default Container;","import Container from '../components/Container';\nimport Config from '../../Config';\n\nclass SvgChart {\n\n    protected container: Container;\n\n    constructor(config: Config) {\n        this.container = new Container(config);\n\n    }\n\n}\n\nexport default SvgChart;","import {SvgStrategy} from './SvgStrategy';\nimport XYAxes from '../components/XYAxes';\nimport Lineset from '../components/Lineset';\n\nimport Config from '../../Config';\nimport SvgChart from '../base/SvgChart';\n\nclass SvgStrategyLinechart extends SvgChart implements SvgStrategy {\n\n    private axes: XYAxes;\n    private lines: Lineset;\n    private config: Config;\n\n    constructor(config: Config) {\n        super(config);\n\n        this.axes = new XYAxes(this.config);\n\n        this.lines = new Lineset(this.config, this.axes);\n\n        this.container\n            .add(this.axes)\n            .add(this.lines);\n    }\n\n    public draw() {\n        window.console.log('drawing linechart');\n    }\n}\n\nexport default SvgStrategyLinechart;","import Chart from './Chart';\nimport SvgStrategyLinechart from '../svg/strategies/SvgStrategyLinechart';\n\nclass Linechart extends Chart {\n\n    constructor() {\n        super(new SvgStrategyLinechart());\n    }\n\n}\n\nexport default Linechart;"],"names":["axisBottom","scaleTime","scaleLinear","format","scaleBand","select","XYAxes"],"mappings":"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"}